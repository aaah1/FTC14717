
//Extra Imports for Gyro
import com.qualcomm.robotcore.hardware.IntegratingGyroscope;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;

import java.util.List;


public class ConceptTensorFlowObjectDetection extends LinearOpMode {
	//variables in public class
	BNO055IMU imu;
    	Orientation angles;
	IntegratingGyroscope gyro;
	NavxMicroNavigationSensor navxMicro;

    public void runOpMode() {

	//code when opModeBegins

	  // Set up the parameters with which we will use our IMU. Note that integration
        // algorithm here just reports accelerations to the logcat log; it doesn't actually
        // provide positional information.
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit           = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit           = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json"; // see the calibration sample opmode
        parameters.loggingEnabled      = true;
        parameters.loggingTag          = "IMU";
        parameters.accelerationIntegrationAlgorithm = new JustLoggingAccelerationIntegrator();

        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port
        // on a Core Device Interface Module, configured to be a sensor of type "AdaFruit IMU",
        // and named "imu".
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);

 	telemetry.log().add("Gyro Calibrating. Do Not Move!");


	
        while (opModeIsActive()) {

	//code while opMode is running
	//Code to get heading and add to telemtry
	angles   = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        telemetry.addData("heading", angles.firstAngle);


//Function for turning robot
    private void turnAngle(double value) {
        double angle;
        angle = value;
        double currentAngle;
        double Threshold = 5.0;
        angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        currentAngle = angles.firstAngle;
        if (angle > 0) {
            while (angle >= (angles.firstAngle - currentAngle) + Threshold || angle >= (angles.firstAngle - currentAngle) - Threshold) {
                leftDrive.setPower(-1);
                rightDrive.setPower(1);
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("heading", angles.firstAngle);
                telemetry.update();
            }
            leftDrive.setPower(0);
            rightDrive.setPower(0);
        }
    if (angle < 0) {
        while (angle <= (angles.firstAngle - currentAngle) + Threshold || angle <= (angles.firstAngle - currentAngle) - Threshold) {
            leftDrive.setPower(1);
            rightDrive.setPower(-1);
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("heading", angles.firstAngle);
            telemetry.update();
        }
        leftDrive.setPower(0);
        rightDrive.setPower(0);
    }
}
